import{r as fU}from"./file-url-DgijyRSD.js";/* empty css                                                   */import"./context-TgWPFwN2.js";class E{constructor(U=0,l=0,F=0){this.x=U,this.y=l,this.z=F}equals(U){return this.x===U.x&&this.y===U.y&&this.z===U.z}add(U){return typeof U=="number"?new E(this.x+U,this.y+U,this.z+U):new E(this.x+U.x,this.y+U.y,this.z+U.z)}subtract(U){return typeof U=="number"?new E(this.x-U,this.y-U,this.z-U):new E(this.x-U.x,this.y-U.y,this.z-U.z)}multiply(U){return typeof U=="number"?new E(this.x*U,this.y*U,this.z*U):U instanceof E?new E(this.x*U.x,this.y*U.y,this.z*U.z):new E(this.x*U.buffer[0]+this.y*U.buffer[4]+this.z*U.buffer[8]+U.buffer[12],this.x*U.buffer[1]+this.y*U.buffer[5]+this.z*U.buffer[9]+U.buffer[13],this.x*U.buffer[2]+this.y*U.buffer[6]+this.z*U.buffer[10]+U.buffer[14])}cross(U){const l=this.y*U.z-this.z*U.y,F=this.z*U.x-this.x*U.z,Q=this.x*U.y-this.y*U.x;return new E(l,F,Q)}dot(U){return this.x*U.x+this.y*U.y+this.z*U.z}lerp(U,l){return new E(this.x+(U.x-this.x)*l,this.y+(U.y-this.y)*l,this.z+(U.z-this.z)*l)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(U){return Math.sqrt((this.x-U.x)**2+(this.y-U.y)**2+(this.z-U.z)**2)}normalize(){const U=this.magnitude();return new E(this.x/U,this.y/U,this.z/U)}flat(){return[this.x,this.y,this.z]}clone(){return new E(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(U=1){return new E(U,U,U)}}class K{constructor(U=0,l=0,F=0,Q=1){this.x=U,this.y=l,this.z=F,this.w=Q}equals(U){return this.x===U.x&&this.y===U.y&&this.z===U.z&&this.w===U.w}normalize(){const U=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new K(this.x/U,this.y/U,this.z/U,this.w/U)}multiply(U){const l=this.w,F=this.x,Q=this.y,n=this.z,B=U.w,Z=U.x,d=U.y,t=U.z;return new K(l*Z+F*B+Q*t-n*d,l*d-F*t+Q*B+n*Z,l*t+F*d-Q*Z+n*B,l*B-F*Z-Q*d-n*t)}inverse(){const U=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new K(-this.x/U,-this.y/U,-this.z/U,this.w/U)}apply(U){const l=new K(U.x,U.y,U.z,0),F=new K(-this.x,-this.y,-this.z,this.w),Q=this.multiply(l).multiply(F);return new E(Q.x,Q.y,Q.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new K(this.x,this.y,this.z,this.w)}static FromEuler(U){const l=U.x/2,F=U.y/2,Q=U.z/2,n=Math.cos(F),B=Math.sin(F),Z=Math.cos(l),d=Math.sin(l),t=Math.cos(Q),e=Math.sin(Q);return new K(n*d*t+B*Z*e,B*Z*t-n*d*e,n*Z*e-B*d*t,n*Z*t+B*d*e)}toEuler(){const U=2*(this.w*this.x+this.y*this.z),l=1-2*(this.x*this.x+this.y*this.y),F=Math.atan2(U,l);let Q;const n=2*(this.w*this.y-this.z*this.x);Q=Math.abs(n)>=1?Math.sign(n)*Math.PI/2:Math.asin(n);const B=2*(this.w*this.z+this.x*this.y),Z=1-2*(this.y*this.y+this.z*this.z),d=Math.atan2(B,Z);return new E(F,Q,d)}static FromMatrix3(U){const l=U.buffer,F=l[0]+l[4]+l[8];let Q,n,B,Z;if(F>0){const d=.5/Math.sqrt(F+1);Z=.25/d,Q=(l[7]-l[5])*d,n=(l[2]-l[6])*d,B=(l[3]-l[1])*d}else if(l[0]>l[4]&&l[0]>l[8]){const d=2*Math.sqrt(1+l[0]-l[4]-l[8]);Z=(l[7]-l[5])/d,Q=.25*d,n=(l[1]+l[3])/d,B=(l[2]+l[6])/d}else if(l[4]>l[8]){const d=2*Math.sqrt(1+l[4]-l[0]-l[8]);Z=(l[2]-l[6])/d,Q=(l[1]+l[3])/d,n=.25*d,B=(l[5]+l[7])/d}else{const d=2*Math.sqrt(1+l[8]-l[0]-l[4]);Z=(l[3]-l[1])/d,Q=(l[2]+l[6])/d,n=(l[5]+l[7])/d,B=.25*d}return new K(Q,n,B,Z)}static FromAxisAngle(U,l){const F=l/2,Q=Math.sin(F),n=Math.cos(F);return new K(U.x*Q,U.y*Q,U.z*Q,n)}toString(){return`[${this.flat().join(", ")}]`}}class NU{constructor(){const U=new Map;this.addEventListener=(l,F)=>{U.has(l)||U.set(l,new Set),U.get(l).add(F)},this.removeEventListener=(l,F)=>{U.has(l)&&U.get(l).delete(F)},this.hasEventListener=(l,F)=>!!U.has(l)&&U.get(l).has(F),this.dispatchEvent=l=>{if(U.has(l.type))for(const F of U.get(l.type))F(l)}}}class BU{constructor(U=1,l=0,F=0,Q=0,n=0,B=1,Z=0,d=0,t=0,e=0,c=1,s=0,I=0,a=0,C=0,J=1){this.buffer=[U,l,F,Q,n,B,Z,d,t,e,c,s,I,a,C,J]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let l=0;l<this.buffer.length;l++)if(this.buffer[l]!==U.buffer[l])return!1;return!0}multiply(U){const l=this.buffer,F=U.buffer;return new BU(F[0]*l[0]+F[1]*l[4]+F[2]*l[8]+F[3]*l[12],F[0]*l[1]+F[1]*l[5]+F[2]*l[9]+F[3]*l[13],F[0]*l[2]+F[1]*l[6]+F[2]*l[10]+F[3]*l[14],F[0]*l[3]+F[1]*l[7]+F[2]*l[11]+F[3]*l[15],F[4]*l[0]+F[5]*l[4]+F[6]*l[8]+F[7]*l[12],F[4]*l[1]+F[5]*l[5]+F[6]*l[9]+F[7]*l[13],F[4]*l[2]+F[5]*l[6]+F[6]*l[10]+F[7]*l[14],F[4]*l[3]+F[5]*l[7]+F[6]*l[11]+F[7]*l[15],F[8]*l[0]+F[9]*l[4]+F[10]*l[8]+F[11]*l[12],F[8]*l[1]+F[9]*l[5]+F[10]*l[9]+F[11]*l[13],F[8]*l[2]+F[9]*l[6]+F[10]*l[10]+F[11]*l[14],F[8]*l[3]+F[9]*l[7]+F[10]*l[11]+F[11]*l[15],F[12]*l[0]+F[13]*l[4]+F[14]*l[8]+F[15]*l[12],F[12]*l[1]+F[13]*l[5]+F[14]*l[9]+F[15]*l[13],F[12]*l[2]+F[13]*l[6]+F[14]*l[10]+F[15]*l[14],F[12]*l[3]+F[13]*l[7]+F[14]*l[11]+F[15]*l[15])}clone(){const U=this.buffer;return new BU(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8],U[9],U[10],U[11],U[12],U[13],U[14],U[15])}determinant(){const U=this.buffer;return U[12]*U[9]*U[6]*U[3]-U[8]*U[13]*U[6]*U[3]-U[12]*U[5]*U[10]*U[3]+U[4]*U[13]*U[10]*U[3]+U[8]*U[5]*U[14]*U[3]-U[4]*U[9]*U[14]*U[3]-U[12]*U[9]*U[2]*U[7]+U[8]*U[13]*U[2]*U[7]+U[12]*U[1]*U[10]*U[7]-U[0]*U[13]*U[10]*U[7]-U[8]*U[1]*U[14]*U[7]+U[0]*U[9]*U[14]*U[7]+U[12]*U[5]*U[2]*U[11]-U[4]*U[13]*U[2]*U[11]-U[12]*U[1]*U[6]*U[11]+U[0]*U[13]*U[6]*U[11]+U[4]*U[1]*U[14]*U[11]-U[0]*U[5]*U[14]*U[11]-U[8]*U[5]*U[2]*U[15]+U[4]*U[9]*U[2]*U[15]+U[8]*U[1]*U[6]*U[15]-U[0]*U[9]*U[6]*U[15]-U[4]*U[1]*U[10]*U[15]+U[0]*U[5]*U[10]*U[15]}invert(){const U=this.buffer,l=this.determinant();if(l===0)throw new Error("Matrix is not invertible.");const F=1/l;return new BU(F*(U[5]*U[10]*U[15]-U[5]*U[11]*U[14]-U[9]*U[6]*U[15]+U[9]*U[7]*U[14]+U[13]*U[6]*U[11]-U[13]*U[7]*U[10]),F*(-U[1]*U[10]*U[15]+U[1]*U[11]*U[14]+U[9]*U[2]*U[15]-U[9]*U[3]*U[14]-U[13]*U[2]*U[11]+U[13]*U[3]*U[10]),F*(U[1]*U[6]*U[15]-U[1]*U[7]*U[14]-U[5]*U[2]*U[15]+U[5]*U[3]*U[14]+U[13]*U[2]*U[7]-U[13]*U[3]*U[6]),F*(-U[1]*U[6]*U[11]+U[1]*U[7]*U[10]+U[5]*U[2]*U[11]-U[5]*U[3]*U[10]-U[9]*U[2]*U[7]+U[9]*U[3]*U[6]),F*(-U[4]*U[10]*U[15]+U[4]*U[11]*U[14]+U[8]*U[6]*U[15]-U[8]*U[7]*U[14]-U[12]*U[6]*U[11]+U[12]*U[7]*U[10]),F*(U[0]*U[10]*U[15]-U[0]*U[11]*U[14]-U[8]*U[2]*U[15]+U[8]*U[3]*U[14]+U[12]*U[2]*U[11]-U[12]*U[3]*U[10]),F*(-U[0]*U[6]*U[15]+U[0]*U[7]*U[14]+U[4]*U[2]*U[15]-U[4]*U[3]*U[14]-U[12]*U[2]*U[7]+U[12]*U[3]*U[6]),F*(U[0]*U[6]*U[11]-U[0]*U[7]*U[10]-U[4]*U[2]*U[11]+U[4]*U[3]*U[10]+U[8]*U[2]*U[7]-U[8]*U[3]*U[6]),F*(U[4]*U[9]*U[15]-U[4]*U[11]*U[13]-U[8]*U[5]*U[15]+U[8]*U[7]*U[13]+U[12]*U[5]*U[11]-U[12]*U[7]*U[9]),F*(-U[0]*U[9]*U[15]+U[0]*U[11]*U[13]+U[8]*U[1]*U[15]-U[8]*U[3]*U[13]-U[12]*U[1]*U[11]+U[12]*U[3]*U[9]),F*(U[0]*U[5]*U[15]-U[0]*U[7]*U[13]-U[4]*U[1]*U[15]+U[4]*U[3]*U[13]+U[12]*U[1]*U[7]-U[12]*U[3]*U[5]),F*(-U[0]*U[5]*U[11]+U[0]*U[7]*U[9]+U[4]*U[1]*U[11]-U[4]*U[3]*U[9]-U[8]*U[1]*U[7]+U[8]*U[3]*U[5]),F*(-U[4]*U[9]*U[14]+U[4]*U[10]*U[13]+U[8]*U[5]*U[14]-U[8]*U[6]*U[13]-U[12]*U[5]*U[10]+U[12]*U[6]*U[9]),F*(U[0]*U[9]*U[14]-U[0]*U[10]*U[13]-U[8]*U[1]*U[14]+U[8]*U[2]*U[13]+U[12]*U[1]*U[10]-U[12]*U[2]*U[9]),F*(-U[0]*U[5]*U[14]+U[0]*U[6]*U[13]+U[4]*U[1]*U[14]-U[4]*U[2]*U[13]-U[12]*U[1]*U[6]+U[12]*U[2]*U[5]),F*(U[0]*U[5]*U[10]-U[0]*U[6]*U[9]-U[4]*U[1]*U[10]+U[4]*U[2]*U[9]+U[8]*U[1]*U[6]-U[8]*U[2]*U[5]))}static Compose(U,l,F){const Q=l.x,n=l.y,B=l.z,Z=l.w,d=Q+Q,t=n+n,e=B+B,c=Q*d,s=Q*t,I=Q*e,a=n*t,C=n*e,J=B*e,G=Z*d,N=Z*t,r=Z*e,y=F.x,x=F.y,M=F.z;return new BU((1-(a+J))*y,(s+r)*y,(I-N)*y,0,(s-r)*x,(1-(c+J))*x,(C+G)*x,0,(I+N)*M,(C-G)*M,(1-(c+a))*M,0,U.x,U.y,U.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class jU extends Event{constructor(U){super("objectAdded"),this.object=U}}class KU extends Event{constructor(U){super("objectRemoved"),this.object=U}}class OU extends Event{constructor(U){super("objectChanged"),this.object=U}}class rU extends NU{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new E,this._rotation=new K,this._scale=new E(1,1,1),this._transform=new BU,this._changeEvent=new OU(this),this.update=()=>{},this.applyPosition=()=>{this.position=new E},this.applyRotation=()=>{this.rotation=new K},this.applyScale=()=>{this.scale=new E(1,1,1)}}_updateMatrix(){this._transform=BU.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(U){this._position.equals(U)||(this._position=U,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(U){this._rotation.equals(U)||(this._rotation=U,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(U){this._scale.equals(U)||(this._scale=U,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let U=new E(0,0,1);return U=this.rotation.apply(U),U}get transform(){return this._transform}}class tU{constructor(U=1,l=0,F=0,Q=0,n=1,B=0,Z=0,d=0,t=1){this.buffer=[U,l,F,Q,n,B,Z,d,t]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let l=0;l<this.buffer.length;l++)if(this.buffer[l]!==U.buffer[l])return!1;return!0}multiply(U){const l=this.buffer,F=U.buffer;return new tU(F[0]*l[0]+F[3]*l[1]+F[6]*l[2],F[1]*l[0]+F[4]*l[1]+F[7]*l[2],F[2]*l[0]+F[5]*l[1]+F[8]*l[2],F[0]*l[3]+F[3]*l[4]+F[6]*l[5],F[1]*l[3]+F[4]*l[4]+F[7]*l[5],F[2]*l[3]+F[5]*l[4]+F[8]*l[5],F[0]*l[6]+F[3]*l[7]+F[6]*l[8],F[1]*l[6]+F[4]*l[7]+F[7]*l[8],F[2]*l[6]+F[5]*l[7]+F[8]*l[8])}clone(){const U=this.buffer;return new tU(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8])}static Eye(U=1){return new tU(U,0,0,0,U,0,0,0,U)}static Diagonal(U){return new tU(U.x,0,0,0,U.y,0,0,0,U.z)}static RotationFromQuaternion(U){return new tU(1-2*U.y*U.y-2*U.z*U.z,2*U.x*U.y-2*U.z*U.w,2*U.x*U.z+2*U.y*U.w,2*U.x*U.y+2*U.z*U.w,1-2*U.x*U.x-2*U.z*U.z,2*U.y*U.z-2*U.x*U.w,2*U.x*U.z-2*U.y*U.w,2*U.y*U.z+2*U.x*U.w,1-2*U.x*U.x-2*U.y*U.y)}static RotationFromEuler(U){const l=Math.cos(U.x),F=Math.sin(U.x),Q=Math.cos(U.y),n=Math.sin(U.y),B=Math.cos(U.z),Z=Math.sin(U.z);return new tU(Q*B+n*F*Z,-Q*Z+n*F*B,n*l,l*Z,l*B,-F,-n*B+Q*F*Z,n*Z+Q*F*B,Q*l)}toString(){return`[${this.buffer.join(", ")}]`}}class q{constructor(U=0,l=null,F=null,Q=null,n=null){this.changed=!1,this.detached=!1,this._vertexCount=U,this._positions=l||new Float32Array(0),this._rotations=F||new Float32Array(0),this._scales=Q||new Float32Array(0),this._colors=n||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=B=>{for(let Z=0;Z<this.vertexCount;Z++)this.positions[3*Z+0]+=B.x,this.positions[3*Z+1]+=B.y,this.positions[3*Z+2]+=B.z;this.changed=!0},this.rotate=B=>{const Z=tU.RotationFromQuaternion(B).buffer;for(let d=0;d<this.vertexCount;d++){const t=this.positions[3*d+0],e=this.positions[3*d+1],c=this.positions[3*d+2];this.positions[3*d+0]=Z[0]*t+Z[1]*e+Z[2]*c,this.positions[3*d+1]=Z[3]*t+Z[4]*e+Z[5]*c,this.positions[3*d+2]=Z[6]*t+Z[7]*e+Z[8]*c;const s=new K(this.rotations[4*d+1],this.rotations[4*d+2],this.rotations[4*d+3],this.rotations[4*d+0]),I=B.multiply(s);this.rotations[4*d+1]=I.x,this.rotations[4*d+2]=I.y,this.rotations[4*d+3]=I.z,this.rotations[4*d+0]=I.w}this.changed=!0},this.scale=B=>{for(let Z=0;Z<this.vertexCount;Z++)this.positions[3*Z+0]*=B.x,this.positions[3*Z+1]*=B.y,this.positions[3*Z+2]*=B.z,this.scales[3*Z+0]*=B.x,this.scales[3*Z+1]*=B.y,this.scales[3*Z+2]*=B.z;this.changed=!0},this.serialize=()=>{const B=new Uint8Array(this.vertexCount*q.RowLength),Z=new Float32Array(B.buffer),d=new Uint8Array(B.buffer);for(let t=0;t<this.vertexCount;t++)Z[8*t+0]=this.positions[3*t+0],Z[8*t+1]=this.positions[3*t+1],Z[8*t+2]=this.positions[3*t+2],d[32*t+24+0]=this.colors[4*t+0],d[32*t+24+1]=this.colors[4*t+1],d[32*t+24+2]=this.colors[4*t+2],d[32*t+24+3]=this.colors[4*t+3],Z[8*t+3+0]=this.scales[3*t+0],Z[8*t+3+1]=this.scales[3*t+1],Z[8*t+3+2]=this.scales[3*t+2],d[32*t+28+0]=128*this.rotations[4*t+0]+128&255,d[32*t+28+1]=128*this.rotations[4*t+1]+128&255,d[32*t+28+2]=128*this.rotations[4*t+2]+128&255,d[32*t+28+3]=128*this.rotations[4*t+3]+128&255;return B},this.reattach=(B,Z,d,t,e)=>{console.assert(B.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${B.byteLength} bytes`),this._positions=new Float32Array(B),this._rotations=new Float32Array(Z),this._scales=new Float32Array(d),this._colors=new Uint8Array(t),this._selection=new Uint8Array(e),this.detached=!1}}static Deserialize(U){const l=U.length/q.RowLength,F=new Float32Array(3*l),Q=new Float32Array(4*l),n=new Float32Array(3*l),B=new Uint8Array(4*l),Z=new Float32Array(U.buffer),d=new Uint8Array(U.buffer);for(let t=0;t<l;t++)F[3*t+0]=Z[8*t+0],F[3*t+1]=Z[8*t+1],F[3*t+2]=Z[8*t+2],Q[4*t+0]=(d[32*t+28+0]-128)/128,Q[4*t+1]=(d[32*t+28+1]-128)/128,Q[4*t+2]=(d[32*t+28+2]-128)/128,Q[4*t+3]=(d[32*t+28+3]-128)/128,n[3*t+0]=Z[8*t+3+0],n[3*t+1]=Z[8*t+3+1],n[3*t+2]=Z[8*t+3+2],B[4*t+0]=d[32*t+24+0],B[4*t+1]=d[32*t+24+1],B[4*t+2]=d[32*t+24+2],B[4*t+3]=d[32*t+24+3];return new q(l,F,Q,n,B)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}}q.RowLength=32;class aU{static SplatToPLY(U,l){let F=`ply
format binary_little_endian 1.0
`;F+=`element vertex ${l}
`;const Q=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let a=0;a<45;a++)Q.push(`f_rest_${a}`);Q.push("opacity"),Q.push("scale_0"),Q.push("scale_1"),Q.push("scale_2"),Q.push("rot_0"),Q.push("rot_1"),Q.push("rot_2"),Q.push("rot_3");for(const a of Q)F+=`property float ${a}
`;F+=`end_header
`;const n=new TextEncoder().encode(F),B=248,Z=l*B,d=new DataView(new ArrayBuffer(n.length+Z));new Uint8Array(d.buffer).set(n,0);const t=new Float32Array(U),e=new Uint8Array(U),c=n.length,s=220,I=232;for(let a=0;a<l;a++){const C=t[8*a+0],J=t[8*a+1],G=t[8*a+2],N=(e[32*a+24+0]/255-.5)/this.SH_C0,r=(e[32*a+24+1]/255-.5)/this.SH_C0,y=(e[32*a+24+2]/255-.5)/this.SH_C0,x=e[32*a+24+3]/255,M=Math.log(x/(1-x)),D=Math.log(t[8*a+3+0]),S=Math.log(t[8*a+3+1]),b=Math.log(t[8*a+3+2]);let u=new K((e[32*a+28+1]-128)/128,(e[32*a+28+2]-128)/128,(e[32*a+28+3]-128)/128,(e[32*a+28+0]-128)/128);u=u.normalize();const $=u.w,ZU=u.x,eU=u.y,nU=u.z;d.setFloat32(c+B*a+0,C,!0),d.setFloat32(c+B*a+4,J,!0),d.setFloat32(c+B*a+8,G,!0),d.setFloat32(c+B*a+24+0,N,!0),d.setFloat32(c+B*a+24+4,r,!0),d.setFloat32(c+B*a+24+8,y,!0),d.setFloat32(c+B*a+216,M,!0),d.setFloat32(c+B*a+s+0,D,!0),d.setFloat32(c+B*a+s+4,S,!0),d.setFloat32(c+B*a+s+8,b,!0),d.setFloat32(c+B*a+I+0,$,!0),d.setFloat32(c+B*a+I+4,ZU,!0),d.setFloat32(c+B*a+I+8,eU,!0),d.setFloat32(c+B*a+I+12,nU,!0)}return d.buffer}}aU.SH_C0=.28209479177387814;class QU extends rU{constructor(U=void 0){super(),this.selectedChanged=!1,this._selected=!1,this._data=U||new q,this.applyPosition=()=>{this.data.translate(this.position),this.position=new E},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new K},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new E(1,1,1)}}saveToFile(U=null,l=null){if(!document)return;if(l){if(l!=="splat"&&l!=="ply")throw new Error("Invalid format. Must be 'splat' or 'ply'")}else l="splat";if(!U){const B=new Date;U=`splat-${B.getFullYear()}-${B.getMonth()+1}-${B.getDate()}.${l}`}this.applyRotation(),this.applyScale(),this.applyPosition();const F=this.data.serialize();let Q;if(l==="ply"){const B=aU.SplatToPLY(F.buffer,this.data.vertexCount);Q=new Blob([B],{type:"application/octet-stream"})}else Q=new Blob([F.buffer],{type:"application/octet-stream"});const n=document.createElement("a");n.download=U,n.href=URL.createObjectURL(Q),n.click()}get data(){return this._data}get selected(){return this._selected}set selected(U){this._selected!==U&&(this._selected=U,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}}class LU{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new BU,this._viewMatrix=new BU,this._viewProj=new BU,this._updateProjectionMatrix=()=>{this._projectionMatrix=new BU(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(U,l)=>{const F=tU.RotationFromQuaternion(l).buffer,Q=U.flat();this._viewMatrix=new BU(F[0],F[1],F[2],0,F[3],F[4],F[5],0,F[6],F[7],F[8],0,-Q[0]*F[0]-Q[1]*F[3]-Q[2]*F[6],-Q[0]*F[1]-Q[1]*F[4]-Q[2]*F[7],-Q[0]*F[2]-Q[1]*F[5]-Q[2]*F[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(U,l)=>{this._width=U,this._height=l,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(U){this._fx!==U&&(this._fx=U,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(U){this._fy!==U&&(this._fy=U,this._updateProjectionMatrix())}get near(){return this._near}set near(U){this._near!==U&&(this._near=U,this._updateProjectionMatrix())}get far(){return this._far}set far(U){this._far!==U&&(this._far=U,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class lU{constructor(U=0,l=0,F=0,Q=0){this.x=U,this.y=l,this.z=F,this.w=Q}equals(U){return this.x===U.x&&this.y===U.y&&this.z===U.z&&this.w===U.w}add(U){return typeof U=="number"?new lU(this.x+U,this.y+U,this.z+U,this.w+U):new lU(this.x+U.x,this.y+U.y,this.z+U.z,this.w+U.w)}subtract(U){return typeof U=="number"?new lU(this.x-U,this.y-U,this.z-U,this.w-U):new lU(this.x-U.x,this.y-U.y,this.z-U.z,this.w-U.w)}multiply(U){return typeof U=="number"?new lU(this.x*U,this.y*U,this.z*U,this.w*U):U instanceof lU?new lU(this.x*U.x,this.y*U.y,this.z*U.z,this.w*U.w):new lU(this.x*U.buffer[0]+this.y*U.buffer[4]+this.z*U.buffer[8]+this.w*U.buffer[12],this.x*U.buffer[1]+this.y*U.buffer[5]+this.z*U.buffer[9]+this.w*U.buffer[13],this.x*U.buffer[2]+this.y*U.buffer[6]+this.z*U.buffer[10]+this.w*U.buffer[14],this.x*U.buffer[3]+this.y*U.buffer[7]+this.z*U.buffer[11]+this.w*U.buffer[15])}dot(U){return this.x*U.x+this.y*U.y+this.z*U.z+this.w*U.w}lerp(U,l){return new lU(this.x+(U.x-this.x)*l,this.y+(U.y-this.y)*l,this.z+(U.z-this.z)*l,this.w+(U.w-this.w)*l)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(U){return Math.sqrt((this.x-U.x)**2+(this.y-U.y)**2+(this.z-U.z)**2+(this.w-U.w)**2)}normalize(){const U=this.magnitude();return new lU(this.x/U,this.y/U,this.z/U,this.w/U)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new lU(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class PU extends rU{constructor(U=void 0){super(),this._data=U||new LU,this._position=new E(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(l,F)=>{const Q=new lU(l,F,-1,1),n=this._data.projectionMatrix.invert(),B=Q.multiply(n),Z=this._data.viewMatrix.invert(),d=B.multiply(Z);return new E(d.x/d.w,d.y/d.w,d.z/d.w).subtract(this.position).normalize()}}get data(){return this._data}}class _U extends NU{constructor(){super(),this._objects=[],this.addObject=U=>{this.objects.push(U),this.dispatchEvent(new jU(U))},this.removeObject=U=>{const l=this.objects.indexOf(U);if(l<0)throw new Error("Object not found in scene");this.objects.splice(l,1),this.dispatchEvent(new KU(U))},this.findObject=U=>{for(const l of this.objects)if(U(l))return l},this.findObjectOfType=U=>{for(const l of this.objects)if(l instanceof U)return l},this.reset=()=>{const U=this.objects.slice();for(const l of U)this.removeObject(l)},this.reset()}saveToFile(U=null,l=null){if(!document)return;if(l){if(l!=="splat"&&l!=="ply")throw new Error("Invalid format. Must be 'splat' or 'ply'")}else l="splat";if(!U){const t=new Date;U=`scene-${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()}.${l}`}const F=[];let Q=0;for(const t of this.objects)if(t.applyRotation(),t.applyScale(),t.applyPosition(),t instanceof QU){const e=t.data.serialize();F.push(e),Q+=t.data.vertexCount}const n=new Uint8Array(Q*q.RowLength);let B,Z=0;for(const t of F)n.set(t,Z),Z+=t.length;if(l==="ply"){const t=aU.SplatToPLY(n.buffer,Q);B=new Blob([t],{type:"application/octet-stream"})}else B=new Blob([n.buffer],{type:"application/octet-stream"});const d=document.createElement("a");d.download=U,d.href=URL.createObjectURL(B),d.click()}get objects(){return this._objects}}class qU{static async LoadAsync(U,l,F,Q=!1){const n=await fetch(U,{mode:"cors",credentials:"omit",cache:Q?"force-cache":"default"});if(n.status!=200)throw new Error(n.status+" Unable to load "+n.url);const B=n.body.getReader(),Z=parseInt(n.headers.get("content-length")),d=new Uint8Array(Z);let t=0;for(;;){const{done:s,value:I}=await B.read();if(s)break;d.set(I,t),t+=I.length,F?.(t/Z)}const e=q.Deserialize(d),c=new QU(e);return l.addObject(c),c}static async LoadFromFileAsync(U,l,F){const Q=new FileReader;let n=new QU;return Q.onload=B=>{const Z=new Uint8Array(B.target.result),d=q.Deserialize(Z);n=new QU(d),l.addObject(n)},Q.onprogress=B=>{F?.(B.loaded/B.total)},Q.readAsArrayBuffer(U),await new Promise(B=>{Q.onloadend=()=>{B()}}),n}}class $U{static async LoadAsync(U,l,F,Q="",n=!1){const B=await fetch(U,{mode:"cors",credentials:"omit",cache:n?"force-cache":"default"});if(B.status!=200)throw new Error(B.status+" Unable to load "+B.url);const Z=B.body.getReader(),d=parseInt(B.headers.get("content-length")),t=new Uint8Array(d);let e=0;for(;;){const{done:a,value:C}=await Z.read();if(a)break;t.set(C,e),e+=C.length,F?.(e/d)}if(t[0]!==112||t[1]!==108||t[2]!==121||t[3]!==10)throw new Error("Invalid PLY file");const c=new Uint8Array(this._ParsePLYBuffer(t.buffer,Q)),s=q.Deserialize(c),I=new QU(s);return l.addObject(I),I}static async LoadFromFileAsync(U,l,F,Q=""){const n=new FileReader;let B=new QU;return n.onload=Z=>{const d=new Uint8Array(this._ParsePLYBuffer(Z.target.result,Q)),t=q.Deserialize(d);B=new QU(t),l.addObject(B)},n.onprogress=Z=>{F?.(Z.loaded/Z.total)},n.readAsArrayBuffer(U),await new Promise(Z=>{n.onloadend=()=>{Z()}}),B}static _ParsePLYBuffer(U,l){const F=new Uint8Array(U),Q=new TextDecoder().decode(F.slice(0,10240)),n=`end_header
`,B=Q.indexOf(n);if(B<0)throw new Error("Unable to read .ply file header");const Z=parseInt(/element vertex (\d+)\n/.exec(Q)[1]);let d=0;const t={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},e=[];for(const a of Q.slice(0,B).split(`
`).filter(C=>C.startsWith("property "))){const[C,J,G]=a.split(" ");if(e.push({name:G,type:J,offset:d}),!t[J])throw new Error(`Unsupported property type: ${J}`);d+=t[J]}const c=new DataView(U,B+11),s=new ArrayBuffer(q.RowLength*Z),I=K.FromEuler(new E(Math.PI/2,0,0));for(let a=0;a<Z;a++){const C=new Float32Array(s,a*q.RowLength,3),J=new Float32Array(s,a*q.RowLength+12,3),G=new Uint8ClampedArray(s,a*q.RowLength+24,4),N=new Uint8ClampedArray(s,a*q.RowLength+28,4);let r=255,y=0,x=0,M=0;e.forEach(S=>{let b;switch(S.type){case"float":b=c.getFloat32(S.offset+a*d,!0);break;case"int":b=c.getInt32(S.offset+a*d,!0);break;default:throw new Error(`Unsupported property type: ${S.type}`)}switch(S.name){case"x":C[0]=b;break;case"y":C[1]=b;break;case"z":C[2]=b;break;case"scale_0":J[0]=Math.exp(b);break;case"scale_1":J[1]=Math.exp(b);break;case"scale_2":J[2]=Math.exp(b);break;case"red":G[0]=b;break;case"green":G[1]=b;break;case"blue":G[2]=b;break;case"f_dc_0":G[0]=255*(.5+aU.SH_C0*b);break;case"f_dc_1":G[1]=255*(.5+aU.SH_C0*b);break;case"f_dc_2":G[2]=255*(.5+aU.SH_C0*b);break;case"f_dc_3":G[3]=255*(.5+aU.SH_C0*b);break;case"opacity":G[3]=1/(1+Math.exp(-b))*255;break;case"rot_0":r=b;break;case"rot_1":y=b;break;case"rot_2":x=b;break;case"rot_3":M=b}});let D=new K(y,x,M,r);switch(l){case"polycam":{const S=C[1];C[1]=-C[2],C[2]=S,D=I.multiply(D);break}case"":break;default:throw new Error(`Unsupported format: ${l}`)}D=D.normalize(),N[0]=128*D.w+128,N[1]=128*D.x+128,N[2]=128*D.y+128,N[3]=128*D.z+128}return s}}function UF(p,U,l){var F=function(Z,d){var t=atob(Z);return t}(p),Q=F.indexOf(`
`,10)+1,n=F.substring(Q)+"",B=new Blob([n],{type:"application/javascript"});return URL.createObjectURL(B)}function GU(p,U,l){var F;return function(Q){return F=F||UF(p),new Worker(F,Q)}}var FF=GU("");class lF{constructor(U,l){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=U;const F=U.gl;this._program=F.createProgram(),this._passes=l||[];const Q=F.createShader(F.VERTEX_SHADER);F.shaderSource(Q,this._getVertexSource()),F.compileShader(Q),F.getShaderParameter(Q,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(Q));const n=F.createShader(F.FRAGMENT_SHADER);F.shaderSource(n,this._getFragmentSource()),F.compileShader(n),F.getShaderParameter(n,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(n)),F.attachShader(this.program,Q),F.attachShader(this.program,n),F.linkProgram(this.program),F.getProgramParameter(this.program,F.LINK_STATUS)||console.error(F.getProgramInfoLog(this.program)),this.resize=()=>{F.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),F.useProgram(this._program),this._initialize();for(const B of this.passes)B.initialize(this);this._initialized=!0,this._started=!0},this.render=(B,Z)=>{F.useProgram(this._program),this._scene===B&&this._camera===Z||(this.dispose(),this._scene=B,this._camera=Z,this.initialize());for(const d of this.passes)d.render();this._render()},this.dispose=()=>{if(this._initialized){F.useProgram(this._program);for(const B of this.passes)B.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var QF=GU(""),tF=function(p={}){var U,l,F=p;F.ready=new Promise((V,A)=>{U=V,l=A});var Q,n=Object.assign({},F),B="";B=(B=self.location.href).indexOf("blob:")!==0?B.substr(0,B.replace(/[?#].*/,"").lastIndexOf("/")+1):"",Q=V=>{var A=new XMLHttpRequest;return A.open("GET",V,!1),A.responseType="arraybuffer",A.send(null),new Uint8Array(A.response)},F.print||console.log.bind(console);var Z,d,t=F.printErr||console.error.bind(console);function e(V){if(nU(V))return function(A){for(var R=atob(A),W=new Uint8Array(R.length),h=0;h<R.length;++h)W[h]=R.charCodeAt(h);return W}(V.slice(eU.length))}Object.assign(F,n),n=null,F.arguments&&F.arguments,F.thisProgram&&F.thisProgram,F.quit&&F.quit,F.wasmBinary&&(Z=F.wasmBinary),typeof WebAssembly!="object"&&u("no native wasm support detected");var c,s,I,a,C,J,G,N,r=!1;function y(){var V=d.buffer;F.HEAP8=c=new Int8Array(V),F.HEAP16=I=new Int16Array(V),F.HEAPU8=s=new Uint8Array(V),F.HEAPU16=a=new Uint16Array(V),F.HEAP32=C=new Int32Array(V),F.HEAPU32=J=new Uint32Array(V),F.HEAPF32=G=new Float32Array(V),F.HEAPF64=N=new Float64Array(V)}var x=[],M=[],D=[],S=0,b=null;function u(V){F.onAbort?.(V),t(V="Aborted("+V+")"),r=!0,V+=". Build with -sASSERTIONS for more info.";var A=new WebAssembly.RuntimeError(V);throw l(A),A}var $,ZU,eU="data:application/octet-stream;base64,",nU=V=>V.startsWith(eU);function O(V){return Promise.resolve().then(()=>function(A){if(A==$&&Z)return new Uint8Array(Z);var R=e(A);if(R)return R;if(Q)return Q(A);throw"both async and sync fetching of the wasm failed"}(V))}function i(V,A,R,W){return function(h,o,m){return O(h).then(X=>WebAssembly.instantiate(X,o)).then(X=>X).then(m,X=>{t(`failed to asynchronously prepare wasm: ${X}`),u(X)})}(A,R,W)}nU($="data:application/octet-stream;base64,")||(ZU=$,$=F.locateFile?F.locateFile(ZU,B):B+ZU);var k=V=>{for(;V.length>0;)V.shift()(F)};F.noExitRuntime;var H,v,FU=V=>{for(var A="",R=V;s[R];)A+=H[s[R++]];return A},VU={},L={},UU=V=>{throw new v(V)};function f(V,A,R={}){if(!("argPackAdvance"in A))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(W,h,o={}){var m=h.name;if(W||UU(`type "${m}" must have a positive integer typeid pointer`),L.hasOwnProperty(W)){if(o.ignoreDuplicateRegistrations)return;UU(`Cannot register type '${m}' twice`)}if(L[W]=h,VU.hasOwnProperty(W)){var X=VU[W];delete VU[W],X.forEach(g=>g())}}(V,A,R)}var w=new class{constructor(){this.allocated=[void 0],this.freelist=[]}get(V){return this.allocated[V]}has(V){return this.allocated[V]!==void 0}allocate(V){var A=this.freelist.pop()||this.allocated.length;return this.allocated[A]=V,A}free(V){this.allocated[V]=void 0,this.freelist.push(V)}},iU=()=>{for(var V=0,A=w.reserved;A<w.allocated.length;++A)w.allocated[A]!==void 0&&++V;return V},bU=V=>(V||UU("Cannot use deleted val. handle = "+V),w.get(V).value),pU=V=>{switch(V){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return w.allocate({refcount:1,value:V})}};function oU(V){return this.fromWireType(C[V>>2])}var YU={name:"emscripten::val",fromWireType:V=>{var A=bU(V);return(R=>{R>=w.reserved&&--w.get(R).refcount==0&&w.free(R)})(V),A},toWireType:(V,A)=>pU(A),argPackAdvance:8,readValueFromPointer:oU,destructorFunction:null},SU=(V,A)=>{switch(A){case 4:return function(R){return this.fromWireType(G[R>>2])};case 8:return function(R){return this.fromWireType(N[R>>3])};default:throw new TypeError(`invalid float width (${A}): ${V}`)}},yU=(V,A,R)=>{switch(A){case 1:return R?W=>c[W>>0]:W=>s[W>>0];case 2:return R?W=>I[W>>1]:W=>a[W>>1];case 4:return R?W=>C[W>>2]:W=>J[W>>2];default:throw new TypeError(`invalid integer width (${A}): ${V}`)}};function kU(V){return this.fromWireType(J[V>>2])}var mU=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,uU=(V,A)=>V?((R,W,h)=>{for(var o=W+h,m=W;R[m]&&!(m>=o);)++m;if(m-W>16&&R.buffer&&mU)return mU.decode(R.subarray(W,m));for(var X="";W<m;){var g=R[W++];if(128&g){var Y=63&R[W++];if((224&g)!=192){var P=63&R[W++];if((g=(240&g)==224?(15&g)<<12|Y<<6|P:(7&g)<<18|Y<<12|P<<6|63&R[W++])<65536)X+=String.fromCharCode(g);else{var j=g-65536;X+=String.fromCharCode(55296|j>>10,56320|1023&j)}}else X+=String.fromCharCode((31&g)<<6|Y)}else X+=String.fromCharCode(g)}return X})(s,V,A):"",CU=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,TU=(V,A)=>{for(var R=V,W=R>>1,h=W+A/2;!(W>=h)&&a[W];)++W;if((R=W<<1)-V>32&&CU)return CU.decode(s.subarray(V,R));for(var o="",m=0;!(m>=A/2);++m){var X=I[V+2*m>>1];if(X==0)break;o+=String.fromCharCode(X)}return o},HU=(V,A,R)=>{if(R??=2147483647,R<2)return 0;for(var W=A,h=(R-=2)<2*V.length?R/2:V.length,o=0;o<h;++o){var m=V.charCodeAt(o);I[A>>1]=m,A+=2}return I[A>>1]=0,A-W},xU=V=>2*V.length,DU=(V,A)=>{for(var R=0,W="";!(R>=A/4);){var h=C[V+4*R>>2];if(h==0)break;if(++R,h>=65536){var o=h-65536;W+=String.fromCharCode(55296|o>>10,56320|1023&o)}else W+=String.fromCharCode(h)}return W},wU=(V,A,R)=>{if(R??=2147483647,R<4)return 0;for(var W=A,h=W+R-4,o=0;o<V.length;++o){var m=V.charCodeAt(o);if(m>=55296&&m<=57343&&(m=65536+((1023&m)<<10)|1023&V.charCodeAt(++o)),C[A>>2]=m,(A+=4)+4>h)break}return C[A>>2]=0,A-W},zU=V=>{for(var A=0,R=0;R<V.length;++R){var W=V.charCodeAt(R);W>=55296&&W<=57343&&++R,A+=4}return A},vU=V=>{var A=(V-d.buffer.byteLength+65535)/65536;try{return d.grow(A),y(),1}catch{}};(()=>{for(var V=new Array(256),A=0;A<256;++A)V[A]=String.fromCharCode(A);H=V})(),v=F.BindingError=class extends Error{constructor(V){super(V),this.name="BindingError"}},F.InternalError=class extends Error{constructor(V){super(V),this.name="InternalError"}},w.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),Object.assign(w,{reserved:w.allocated.length}),F.count_emval_handles=iU;var MU={f:(V,A,R,W,h)=>{},i:(V,A,R,W)=>{f(V,{name:A=FU(A),fromWireType:function(h){return!!h},toWireType:function(h,o){return o?R:W},argPackAdvance:8,readValueFromPointer:function(h){return this.fromWireType(s[h])},destructorFunction:null})},h:V=>f(V,YU),e:(V,A,R)=>{f(V,{name:A=FU(A),fromWireType:W=>W,toWireType:(W,h)=>h,argPackAdvance:8,readValueFromPointer:SU(A,R),destructorFunction:null})},b:(V,A,R,W,h)=>{A=FU(A);var o=g=>g;if(W===0){var m=32-8*R;o=g=>g<<m>>>m}var X=A.includes("unsigned");f(V,{name:A,fromWireType:o,toWireType:X?function(g,Y){return this.name,Y>>>0}:function(g,Y){return this.name,Y},argPackAdvance:8,readValueFromPointer:yU(A,R,W!==0),destructorFunction:null})},a:(V,A,R)=>{var W=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][A];function h(o){var m=J[o>>2],X=J[o+4>>2];return new W(c.buffer,X,m)}f(V,{name:R=FU(R),fromWireType:h,argPackAdvance:8,readValueFromPointer:h},{ignoreDuplicateRegistrations:!0})},d:(V,A)=>{var R=(A=FU(A))==="std::string";f(V,{name:A,fromWireType(W){var h,o=J[W>>2],m=W+4;if(R)for(var X=m,g=0;g<=o;++g){var Y=m+g;if(g==o||s[Y]==0){var P=uU(X,Y-X);h===void 0?h=P:(h+="\0",h+=P),X=Y+1}}else{var j=new Array(o);for(g=0;g<o;++g)j[g]=String.fromCharCode(s[m+g]);h=j.join("")}return AU(W),h},toWireType(W,h){var o;h instanceof ArrayBuffer&&(h=new Uint8Array(h));var m=typeof h=="string";m||h instanceof Uint8Array||h instanceof Uint8ClampedArray||h instanceof Int8Array||UU("Cannot pass non-string to std::string"),o=R&&m?(j=>{for(var z=0,T=0;T<j.length;++T){var dU=j.charCodeAt(T);dU<=127?z++:dU<=2047?z+=2:dU>=55296&&dU<=57343?(z+=4,++T):z+=3}return z})(h):h.length;var X=IU(4+o+1),g=X+4;if(J[X>>2]=o,R&&m)((j,z,T,dU)=>{if(!(dU>0))return 0;for(var WU=T+dU-1,hU=0;hU<j.length;++hU){var _=j.charCodeAt(hU);if(_>=55296&&_<=57343&&(_=65536+((1023&_)<<10)|1023&j.charCodeAt(++hU)),_<=127){if(T>=WU)break;z[T++]=_}else if(_<=2047){if(T+1>=WU)break;z[T++]=192|_>>6,z[T++]=128|63&_}else if(_<=65535){if(T+2>=WU)break;z[T++]=224|_>>12,z[T++]=128|_>>6&63,z[T++]=128|63&_}else{if(T+3>=WU)break;z[T++]=240|_>>18,z[T++]=128|_>>12&63,z[T++]=128|_>>6&63,z[T++]=128|63&_}}z[T]=0})(h,s,g,o+1);else if(m)for(var Y=0;Y<o;++Y){var P=h.charCodeAt(Y);P>255&&(AU(g),UU("String has UTF-16 code units that do not fit in 8 bits")),s[g+Y]=P}else for(Y=0;Y<o;++Y)s[g+Y]=h[Y];return W!==null&&W.push(AU,X),X},argPackAdvance:8,readValueFromPointer:kU,destructorFunction(W){AU(W)}})},c:(V,A,R)=>{var W,h,o,m,X;R=FU(R),A===2?(W=TU,h=HU,m=xU,o=()=>a,X=1):A===4&&(W=DU,h=wU,m=zU,o=()=>J,X=2),f(V,{name:R,fromWireType:g=>{for(var Y,P=J[g>>2],j=o(),z=g+4,T=0;T<=P;++T){var dU=g+4+T*A;if(T==P||j[dU>>X]==0){var WU=W(z,dU-z);Y===void 0?Y=WU:(Y+="\0",Y+=WU),z=dU+A}}return AU(g),Y},toWireType:(g,Y)=>{typeof Y!="string"&&UU(`Cannot pass non-string to C++ string type ${R}`);var P=m(Y),j=IU(4+P+A);return J[j>>2]=P>>X,h(Y,j+4,P+A),g!==null&&g.push(AU,j),j},argPackAdvance:8,readValueFromPointer:oU,destructorFunction(g){AU(g)}})},j:(V,A)=>{f(V,{isVoid:!0,name:A=FU(A),argPackAdvance:0,fromWireType:()=>{},toWireType:(R,W)=>{}})},g:V=>{var A=s.length,R=2147483648;if((V>>>=0)>R)return!1;for(var W,h,o=1;o<=4;o*=2){var m=A*(1+.2/o);m=Math.min(m,V+100663296);var X=Math.min(R,(W=Math.max(V,m))+((h=65536)-W%h)%h);if(vU(X))return!0}return!1}},RU=function(){var V={a:MU};function A(R,W){var h;return RU=R.exports,d=RU.k,y(),h=RU.l,M.unshift(h),function(o){if(S--,F.monitorRunDependencies?.(S),S==0&&b){var m=b;b=null,m()}}(),RU}if(S++,F.monitorRunDependencies?.(S),F.instantiateWasm)try{return F.instantiateWasm(V,A)}catch(R){t(`Module.instantiateWasm callback failed with error: ${R}`),l(R)}return i(0,$,V,function(R){A(R.instance)}).catch(l),{}}();F._pack=(V,A,R,W,h,o,m,X,g,Y,P)=>(F._pack=RU.m)(V,A,R,W,h,o,m,X,g,Y,P);var cU,IU=F._malloc=V=>(IU=F._malloc=RU.o)(V),AU=F._free=V=>(AU=F._free=RU.p)(V);function gU(){function V(){cU||(cU=!0,F.calledRun=!0,r||(k(M),U(F),F.onRuntimeInitialized&&F.onRuntimeInitialized(),function(){if(F.postRun)for(typeof F.postRun=="function"&&(F.postRun=[F.postRun]);F.postRun.length;)A=F.postRun.shift(),D.unshift(A);var A;k(D)}()))}S>0||(function(){if(F.preRun)for(typeof F.preRun=="function"&&(F.preRun=[F.preRun]);F.preRun.length;)A=F.preRun.shift(),x.unshift(A);var A;k(x)}(),S>0||(F.setStatus?(F.setStatus("Running..."),setTimeout(function(){setTimeout(function(){F.setStatus("")},1),V()},1)):V()))}if(b=function V(){cU||gU(),cU||(b=V)},F.preInit)for(typeof F.preInit=="function"&&(F.preInit=[F.preInit]);F.preInit.length>0;)F.preInit.pop()();return gU(),p.ready};class BF{constructor(U){this.dataChanged=!1,this.transformsChanged=!1,this._updating=new Set,this._dirty=new Set;let l=0,F=0;this._splatIndices=new Map,this._offsets=new Map;const Q=new Map;for(const t of U.objects)t instanceof QU&&(this._splatIndices.set(t,F),this._offsets.set(t,l),Q.set(l,t),l+=t.data.vertexCount,F++);this._vertexCount=l,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=Q.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new QF;const n=t=>{const e=this._splatIndices.get(t);this._transforms.set(t.transform.buffer,20*e),this._transforms[20*e+16]=t.selected?1:0,t.positionChanged=!1,t.rotationChanged=!1,t.scaleChanged=!1,t.selectedChanged=!1,this.transformsChanged=!0};let B;this._worker.onmessage=t=>{if(t.data.response){const e=t.data.response,c=Q.get(e.offset);n(c);const s=this._splatIndices.get(c);for(let I=0;I<c.data.vertexCount;I++)this._transformIndices[e.offset+I]=s;this._data.set(e.data,8*e.offset),c.data.reattach(e.positions,e.rotations,e.scales,e.colors,e.selection),this._positions.set(e.worldPositions,3*e.offset),this._rotations.set(e.worldRotations,4*e.offset),this._scales.set(e.worldScales,3*e.offset),this._updating.delete(c),c.selectedChanged=!1,this.dataChanged=!0}},async function(){B=await tF()}();const Z=t=>{if(!B)return void async function(){for(;!B;)await new Promise(b=>setTimeout(b,0))}().then(()=>{Z(t)});n(t);const e=B._malloc(3*t.data.vertexCount*4),c=B._malloc(4*t.data.vertexCount*4),s=B._malloc(3*t.data.vertexCount*4),I=B._malloc(4*t.data.vertexCount),a=B._malloc(t.data.vertexCount),C=B._malloc(8*t.data.vertexCount*4),J=B._malloc(3*t.data.vertexCount*4),G=B._malloc(4*t.data.vertexCount*4),N=B._malloc(3*t.data.vertexCount*4);B.HEAPF32.set(t.data.positions,e/4),B.HEAPF32.set(t.data.rotations,c/4),B.HEAPF32.set(t.data.scales,s/4),B.HEAPU8.set(t.data.colors,I),B.HEAPU8.set(t.data.selection,a),B._pack(t.selected,t.data.vertexCount,e,c,s,I,a,C,J,G,N);const r=new Uint32Array(B.HEAPU32.buffer,C,8*t.data.vertexCount),y=new Float32Array(B.HEAPF32.buffer,J,3*t.data.vertexCount),x=new Float32Array(B.HEAPF32.buffer,G,4*t.data.vertexCount),M=new Float32Array(B.HEAPF32.buffer,N,3*t.data.vertexCount),D=this._splatIndices.get(t),S=this._offsets.get(t);for(let b=0;b<t.data.vertexCount;b++)this._transformIndices[S+b]=D;this._data.set(r,8*S),this._positions.set(y,3*S),this._rotations.set(x,4*S),this._scales.set(M,3*S),B._free(e),B._free(c),B._free(s),B._free(I),B._free(a),B._free(C),B._free(J),B._free(G),B._free(N),this.dataChanged=!0},d=t=>{if((t.positionChanged||t.rotationChanged||t.scaleChanged||t.selectedChanged)&&n(t),!t.data.changed||t.data.detached)return;const e={position:new Float32Array(t.position.flat()),rotation:new Float32Array(t.rotation.flat()),scale:new Float32Array(t.scale.flat()),selected:t.selected,vertexCount:t.data.vertexCount,positions:t.data.positions,rotations:t.data.rotations,scales:t.data.scales,colors:t.data.colors,selection:t.data.selection,offset:this._offsets.get(t)};this._worker.postMessage({splat:e},[e.position.buffer,e.rotation.buffer,e.scale.buffer,e.positions.buffer,e.rotations.buffer,e.scales.buffer,e.colors.buffer,e.selection.buffer]),this._updating.add(t),t.data.detached=!0};this.getSplat=t=>{let e=null;for(const[c,s]of this._offsets){if(!(t>=s))break;e=c}return e},this.getLocalIndex=(t,e)=>e-this._offsets.get(t),this.markDirty=t=>{this._dirty.add(t)},this.rebuild=()=>{for(const t of this._dirty)d(t);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const t of this._splatIndices.keys())Z(t)}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class XU{constructor(U=0,l=0,F=0,Q=255){this.r=U,this.g=l,this.b=F,this.a=Q}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map(U=>U.toString(16).padStart(2,"0")).join("")}toString(){return`[${this.flat().join(", ")}]`}}class EU extends lF{constructor(U,l){super(U,l),this._outlineThickness=10,this._outlineColor=new XU(255,165,0,255),this._renderData=null,this._depthIndex=new Uint32Array,this._chunks=null,this._splatTexture=null;const F=U.canvas,Q=U.gl;let n,B,Z,d,t,e,c,s,I,a,C,J,G,N,r,y;this._resize=()=>{this._camera&&(this._camera.data.setSize(F.width,F.height),this._camera.update(),B=Q.getUniformLocation(this.program,"projection"),Q.uniformMatrix4fv(B,!1,this._camera.data.projectionMatrix.buffer),Z=Q.getUniformLocation(this.program,"viewport"),Q.uniform2fv(Z,new Float32Array([F.width,F.height])))};const x=()=>{n=new FF,n.onmessage=b=>{if(b.data.depthIndex){const{depthIndex:u,chunks:$}=b.data;this._depthIndex=u,this._chunks=$,Q.bindBuffer(Q.ARRAY_BUFFER,y),Q.bufferData(Q.ARRAY_BUFFER,u,Q.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",M),this._scene.addEventListener("objectRemoved",D);for(const b of this._scene.objects)b instanceof QU&&b.addEventListener("objectChanged",S);this._renderData=new BF(this._scene),d=Q.getUniformLocation(this.program,"focal"),Q.uniform2fv(d,new Float32Array([this._camera.data.fx,this._camera.data.fy])),t=Q.getUniformLocation(this.program,"view"),Q.uniformMatrix4fv(t,!1,this._camera.data.viewMatrix.buffer),I=Q.getUniformLocation(this.program,"outlineThickness"),Q.uniform1f(I,this.outlineThickness),a=Q.getUniformLocation(this.program,"outlineColor"),Q.uniform4fv(a,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=Q.createTexture(),e=Q.getUniformLocation(this.program,"u_texture"),Q.uniform1i(e,0),G=Q.createTexture(),c=Q.getUniformLocation(this.program,"u_transforms"),Q.uniform1i(c,1),N=Q.createTexture(),s=Q.getUniformLocation(this.program,"u_transformIndices"),Q.uniform1i(s,2),r=Q.createBuffer(),Q.bindBuffer(Q.ARRAY_BUFFER,r),Q.bufferData(Q.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),Q.STATIC_DRAW),C=Q.getAttribLocation(this.program,"position"),Q.enableVertexAttribArray(C),Q.vertexAttribPointer(C,2,Q.FLOAT,!1,0,0),y=Q.createBuffer(),J=Q.getAttribLocation(this.program,"index"),Q.enableVertexAttribArray(J),Q.bindBuffer(Q.ARRAY_BUFFER,y),x()}else console.error("Cannot render without scene and camera")};const M=b=>{const u=b;u.object instanceof QU&&u.object.addEventListener("objectChanged",S),this.dispose()},D=b=>{const u=b;u.object instanceof QU&&u.object.removeEventListener("objectChanged",S),this.dispose()},S=b=>{const u=b;u.object instanceof QU&&this._renderData&&this._renderData.markDirty(u.object)};this._render=()=>{if(this._scene&&this._camera&&this.renderData){if(this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged){this.renderData.dataChanged&&(Q.activeTexture(Q.TEXTURE0),Q.bindTexture(Q.TEXTURE_2D,this.splatTexture),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_S,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_T,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MIN_FILTER,Q.NEAREST),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MAG_FILTER,Q.NEAREST),Q.texImage2D(Q.TEXTURE_2D,0,Q.RGBA32UI,this.renderData.width,this.renderData.height,0,Q.RGBA_INTEGER,Q.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(Q.activeTexture(Q.TEXTURE1),Q.bindTexture(Q.TEXTURE_2D,G),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_S,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_T,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MIN_FILTER,Q.NEAREST),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MAG_FILTER,Q.NEAREST),Q.texImage2D(Q.TEXTURE_2D,0,Q.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,Q.RGBA,Q.FLOAT,this.renderData.transforms),Q.activeTexture(Q.TEXTURE2),Q.bindTexture(Q.TEXTURE_2D,N),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_S,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_T,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MIN_FILTER,Q.NEAREST),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MAG_FILTER,Q.NEAREST),Q.texImage2D(Q.TEXTURE_2D,0,Q.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,Q.RED_INTEGER,Q.UNSIGNED_INT,this.renderData.transformIndices));const b=new Float32Array(this.renderData.positions.slice().buffer),u=new Float32Array(this.renderData.transforms.slice().buffer),$=new Uint32Array(this.renderData.transformIndices.slice().buffer);n.postMessage({sortData:{positions:b,transforms:u,transformIndices:$,vertexCount:this.renderData.vertexCount}},[b.buffer,u.buffer,$.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1}this._camera.update(),n.postMessage({viewProj:this._camera.data.viewProj.buffer}),Q.viewport(0,0,F.width,F.height),Q.clearColor(0,0,0,0),Q.clear(Q.COLOR_BUFFER_BIT),Q.disable(Q.DEPTH_TEST),Q.enable(Q.BLEND),Q.blendFuncSeparate(Q.ONE_MINUS_DST_ALPHA,Q.ONE,Q.ONE_MINUS_DST_ALPHA,Q.ONE),Q.blendEquationSeparate(Q.FUNC_ADD,Q.FUNC_ADD),Q.uniformMatrix4fv(B,!1,this._camera.data.projectionMatrix.buffer),Q.uniformMatrix4fv(t,!1,this._camera.data.viewMatrix.buffer),Q.bindBuffer(Q.ARRAY_BUFFER,r),Q.vertexAttribPointer(C,2,Q.FLOAT,!1,0,0),Q.bindBuffer(Q.ARRAY_BUFFER,y),Q.bufferData(Q.ARRAY_BUFFER,this.depthIndex,Q.STATIC_DRAW),Q.vertexAttribIPointer(J,1,Q.INT,0,0),Q.vertexAttribDivisor(J,1),Q.drawArraysInstanced(Q.TRIANGLE_FAN,0,4,this.renderData.vertexCount)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",M),this._scene.removeEventListener("objectRemoved",D);for(const b of this._scene.objects)b instanceof QU&&b.removeEventListener("objectChanged",S);n.terminate(),this.renderData.dispose(),Q.deleteTexture(this.splatTexture),Q.deleteTexture(G),Q.deleteTexture(N),Q.deleteBuffer(y),Q.deleteBuffer(r)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=b=>{this._outlineThickness=b,this._initialized&&Q.uniform1f(I,b)},this._setOutlineColor=b=>{this._outlineColor=b,this._initialized&&Q.uniform4fv(a,new Float32Array(b.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get chunks(){return this._chunks}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(U){this._setOutlineThickness(U)}get outlineColor(){return this._outlineColor}set outlineColor(U){this._setOutlineColor(U)}_getVertexSource(){return`#version 300 es
precision highp float;
precision highp int;

uniform highp usampler2D u_texture;
uniform highp sampler2D u_transforms;
uniform highp usampler2D u_transformIndices;
uniform mat4 projection, view;
uniform vec2 focal;
uniform vec2 viewport;

uniform bool useDepthFade;
uniform float depthFade;

in vec2 position;
in int index;

out vec4 vColor;
out vec2 vPosition;
out float vSize;
out float vSelected;

void main () {
    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);
    float selected = float((cen.w >> 24) & 0xffu);

    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;
    mat4 transform = mat4(
        texelFetch(u_transforms, ivec2(0, transformIndex), 0),
        texelFetch(u_transforms, ivec2(1, transformIndex), 0),
        texelFetch(u_transforms, ivec2(2, transformIndex), 0),
        texelFetch(u_transforms, ivec2(3, transformIndex), 0)
    );

    if (selected < 0.5) {
        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;
    }

    mat4 viewTransform = view * transform;

    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);
    vec4 pos2d = projection * cam;

    float clip = 1.2 * pos2d.w;
    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {
        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
        return;
    }

    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);
    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);
    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);

    mat3 J = mat3(
        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), 
        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), 
        0., 0., 0.
    );

    mat3 T = transpose(mat3(viewTransform)) * J;
    mat3 cov2d = transpose(T) * Vrk * T;

    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;
    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));
    float lambda1 = mid + radius, lambda2 = mid - radius;

    if (lambda2 < 0.0) return;
    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));
    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;
    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);

    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;
    vPosition = position;
    vSize = length(majorAxis);
    vSelected = selected;

    float scalingFactor = 1.0;

    if (useDepthFade) {
        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;
        float near = 0.1; float far = 100.0;
        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));
        float start = max(normalizedDepth - 0.1, 0.0);
        float end = min(normalizedDepth + 0.1, 1.0);
        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);
    }

    vec2 vCenter = vec2(pos2d) / pos2d.w;
    gl_Position = vec4(
        vCenter 
        + position.x * majorAxis * scalingFactor / viewport
        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);
}
`}_getFragmentSource(){return`#version 300 es
precision highp float;

uniform float outlineThickness;
uniform vec4 outlineColor;

in vec4 vColor;
in vec2 vPosition;
in float vSize;
in float vSelected;

out vec4 fragColor;

void main () {
    float A = -dot(vPosition, vPosition);

    if (A < -4.0) discard;

    if (vSelected < 0.5) {
        float B = exp(A) * vColor.a;
        fragColor = vec4(B * vColor.rgb, B);
        return;
    }

    float outlineThreshold = -4.0 + (outlineThickness / vSize);

    if (A < outlineThreshold) {
        fragColor = outlineColor;
    } 
    else {
        float B = exp(A) * vColor.a;
        fragColor = vec4(B * vColor.rgb, B);
    }
}
`}}class dF{constructor(U=1){let l,F,Q,n,B=0,Z=!1;this.initialize=d=>{if(!(d instanceof EU))throw new Error("FadeInPass requires a RenderProgram");B=d.started?1:0,Z=!0,l=d,F=d.renderer.gl,Q=F.getUniformLocation(l.program,"useDepthFade"),F.uniform1i(Q,1),n=F.getUniformLocation(l.program,"depthFade"),F.uniform1f(n,B)},this.render=()=>{var d;Z&&!(!((d=l.renderData)===null||d===void 0)&&d.updating)&&(F.useProgram(l.program),B=Math.min(B+.01*U,1),B>=1&&(Z=!1,F.uniform1i(Q,0)),F.uniform1f(n,B))}}dispose(){}}class VF{constructor(U=null,l=null){this._backgroundColor=new XU;const F=U||document.createElement("canvas");U||(F.style.display="block",F.style.boxSizing="border-box",F.style.width="100%",F.style.height="100%",F.style.margin="0",F.style.padding="0",document.body.appendChild(F)),F.style.background=this._backgroundColor.toHexString(),this._canvas=F,this._gl=F.getContext("webgl2",{antialias:!1});const Q=l||[];l||Q.push(new dF),this._renderProgram=new EU(this,Q);const n=[this._renderProgram];this.resize=()=>{const B=F.clientWidth,Z=F.clientHeight;F.width===B&&F.height===Z||this.setSize(B,Z)},this.setSize=(B,Z)=>{F.width=B,F.height=Z,this._gl.viewport(0,0,F.width,F.height);for(const d of n)d.resize()},this.render=(B,Z)=>{for(const d of n)d.render(B,Z)},this.dispose=()=>{for(const B of n)B.dispose()},this.addProgram=B=>{n.push(B)},this.removeProgram=B=>{const Z=n.indexOf(B);if(Z<0)throw new Error("Program not found");n.splice(Z,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(U){this._backgroundColor=U,this._canvas.style.background=U.toHexString()}}class ZF{constructor(U,l,F=.5,Q=.5,n=5,B=!0,Z=new E){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let d=Z.clone(),t=d.clone(),e=F,c=Q,s=n,I=!1,a=!1,C=0,J=0,G=0;const N={};let r=!1;U.addEventListener("objectChanged",()=>{if(r)return;const i=U.rotation.toEuler();e=-i.y,c=-i.x;const k=U.position.x-s*Math.sin(e)*Math.cos(c),H=U.position.y+s*Math.sin(c),v=U.position.z+s*Math.cos(e)*Math.cos(c);t=new E(k,H,v)}),this.setCameraTarget=i=>{const k=i.x-U.position.x,H=i.y-U.position.y,v=i.z-U.position.z;s=Math.sqrt(k*k+H*H+v*v),c=Math.atan2(H,Math.sqrt(k*k+v*v)),e=-Math.atan2(k,v),t=new E(i.x,i.y,i.z)};const y=()=>.1+.9*(s-this.minZoom)/(this.maxZoom-this.minZoom),x=i=>{N[i.code]=!0,i.code==="ArrowUp"&&(N.KeyW=!0),i.code==="ArrowDown"&&(N.KeyS=!0),i.code==="ArrowLeft"&&(N.KeyA=!0),i.code==="ArrowRight"&&(N.KeyD=!0)},M=i=>{N[i.code]=!1,i.code==="ArrowUp"&&(N.KeyW=!1),i.code==="ArrowDown"&&(N.KeyS=!1),i.code==="ArrowLeft"&&(N.KeyA=!1),i.code==="ArrowRight"&&(N.KeyD=!1)},D=i=>{O(i),I=!0,a=i.button===2,J=i.clientX,G=i.clientY,window.addEventListener("mouseup",S)},S=i=>{O(i),I=!1,a=!1,window.removeEventListener("mouseup",S)},b=i=>{if(O(i),!I||!U)return;const k=i.clientX-J,H=i.clientY-G;if(a){const v=y(),FU=-k*this.panSpeed*.01*v,VU=-H*this.panSpeed*.01*v,L=tU.RotationFromQuaternion(U.rotation).buffer,UU=new E(L[0],L[3],L[6]),f=new E(L[1],L[4],L[7]);t=t.add(UU.multiply(FU)),t=t.add(f.multiply(VU))}else e-=k*this.orbitSpeed*.003,c+=H*this.orbitSpeed*.003,c=Math.min(Math.max(c,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);J=i.clientX,G=i.clientY},u=i=>{O(i);const k=y();s+=i.deltaY*this.zoomSpeed*.025*k,s=Math.min(Math.max(s,this.minZoom),this.maxZoom)},$=i=>{if(O(i),i.touches.length===1)I=!0,a=!1,J=i.touches[0].clientX,G=i.touches[0].clientY,C=0;else if(i.touches.length===2){I=!0,a=!0,J=(i.touches[0].clientX+i.touches[1].clientX)/2,G=(i.touches[0].clientY+i.touches[1].clientY)/2;const k=i.touches[0].clientX-i.touches[1].clientX,H=i.touches[0].clientY-i.touches[1].clientY;C=Math.sqrt(k*k+H*H)}},ZU=i=>{O(i),I=!1,a=!1},eU=i=>{if(O(i),I&&U)if(a){const k=y(),H=i.touches[0].clientX-i.touches[1].clientX,v=i.touches[0].clientY-i.touches[1].clientY,FU=Math.sqrt(H*H+v*v);s+=(C-FU)*this.zoomSpeed*.1*k,s=Math.min(Math.max(s,this.minZoom),this.maxZoom),C=FU;const VU=(i.touches[0].clientX+i.touches[1].clientX)/2,L=(i.touches[0].clientY+i.touches[1].clientY)/2,UU=VU-J,f=L-G,w=tU.RotationFromQuaternion(U.rotation).buffer,iU=new E(w[0],w[3],w[6]),bU=new E(w[1],w[4],w[7]);t=t.add(iU.multiply(-UU*this.panSpeed*.025*k)),t=t.add(bU.multiply(-f*this.panSpeed*.025*k)),J=VU,G=L}else{const k=i.touches[0].clientX-J,H=i.touches[0].clientY-G;e-=k*this.orbitSpeed*.003,c+=H*this.orbitSpeed*.003,c=Math.min(Math.max(c,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),J=i.touches[0].clientX,G=i.touches[0].clientY}},nU=(i,k,H)=>(1-H)*i+H*k;this.update=()=>{r=!0,F=nU(F,e,this.dampening),Q=nU(Q,c,this.dampening),n=nU(n,s,this.dampening),d=d.lerp(t,this.dampening);const i=d.x+n*Math.sin(F)*Math.cos(Q),k=d.y-n*Math.sin(Q),H=d.z-n*Math.cos(F)*Math.cos(Q);U.position=new E(i,k,H);const v=d.subtract(U.position).normalize(),FU=Math.asin(-v.y),VU=Math.atan2(v.x,v.z);U.rotation=K.FromEuler(new E(FU,VU,0));const L=.025,UU=.01,f=tU.RotationFromQuaternion(U.rotation).buffer,w=new E(-f[2],-f[5],-f[8]),iU=new E(f[0],f[3],f[6]);N.KeyS&&(t=t.add(w.multiply(L))),N.KeyW&&(t=t.subtract(w.multiply(L))),N.KeyA&&(t=t.subtract(iU.multiply(L))),N.KeyD&&(t=t.add(iU.multiply(L))),N.KeyE&&(e+=UU),N.KeyQ&&(e-=UU),N.KeyR&&(c+=UU),N.KeyF&&(c-=UU),r=!1};const O=i=>{i.preventDefault(),i.stopPropagation()};this.dispose=()=>{l.removeEventListener("dragenter",O),l.removeEventListener("dragover",O),l.removeEventListener("dragleave",O),l.removeEventListener("contextmenu",O),l.removeEventListener("mousedown",D),l.removeEventListener("mousemove",b),l.removeEventListener("wheel",u),l.removeEventListener("touchstart",$),l.removeEventListener("touchend",ZU),l.removeEventListener("touchmove",eU),B&&(window.removeEventListener("keydown",x),window.removeEventListener("keyup",M))},B&&(window.addEventListener("keydown",x),window.addEventListener("keyup",M)),l.addEventListener("dragenter",O),l.addEventListener("dragover",O),l.addEventListener("dragleave",O),l.addEventListener("contextmenu",O),l.addEventListener("mousedown",D),l.addEventListener("mousemove",b),l.addEventListener("wheel",u),l.addEventListener("touchstart",$),l.addEventListener("touchend",ZU),l.addEventListener("touchmove",eU),this.update()}}const{SvelteComponent:nF,binding_callbacks:AF,detach:eF,element:RF,flush:sU,init:WF,insert:aF,noop:JU,safe_not_equal:iF}=window.__gradio__svelte__internal,{onMount:cF}=window.__gradio__svelte__internal;function hF(p){let U;return{c(){U=RF("canvas")},m(l,F){aF(l,U,F),p[9](U)},p:JU,i:JU,o:JU,d(l){l&&eF(U),p[9](null)}}}function sF(p,U,l){let F,Q,{value:n}=U,{zoom_speed:B}=U,{pan_speed:Z}=U,{resolved_url:d=void 0}=U,t,e,c,s,I=null,a,C=!1,J=null;function G(){if(J!==null&&(cancelAnimationFrame(J),J=null),I!==null&&(I.dispose(),I=null),c=new _U,s=new PU,I=new VF(e),a=new ZF(s,e),a.zoomSpeed=B,a.panSpeed=Z,!n)return;let r=!1;const y=async()=>{if(r){console.error("Already loading");return}if(!d)throw new Error("No resolved URL");if(r=!0,d.endsWith(".ply"))await $U.LoadAsync(d,c,void 0);else if(d.endsWith(".splat"))await qU.LoadAsync(d,c,void 0);else throw new Error("Unsupported file type");r=!1},x=()=>{if(I){if(r){J=requestAnimationFrame(x);return}a.update(),I.render(c,s),J=requestAnimationFrame(x)}};y(),J=requestAnimationFrame(x)}cF(()=>(n!=null&&G(),l(6,C=!0),()=>{I&&I.dispose()}));function N(r){AF[r?"unshift":"push"](()=>{e=r,l(0,e)})}return p.$$set=r=>{"value"in r&&l(2,n=r.value),"zoom_speed"in r&&l(3,B=r.zoom_speed),"pan_speed"in r&&l(4,Z=r.pan_speed),"resolved_url"in r&&l(1,d=r.resolved_url)},p.$$.update=()=>{if(p.$$.dirty&4&&l(8,F=n.url),p.$$.dirty&288&&(l(1,d=F),F)){l(5,t=F);const r=F;fU(F).then(y=>{t===r?l(1,d=y??void 0):y&&URL.revokeObjectURL(y)})}p.$$.dirty&4&&l(7,{path:Q}=n||{path:void 0},Q),p.$$.dirty&193&&e&&C&&Q&&G()},[e,d,n,B,Z,t,C,Q,F,N]}class oF extends nF{constructor(U){super(),WF(this,U,sF,hF,iF,{value:2,zoom_speed:3,pan_speed:4,resolved_url:1})}get value(){return this.$$.ctx[2]}set value(U){this.$$set({value:U}),sU()}get zoom_speed(){return this.$$.ctx[3]}set zoom_speed(U){this.$$set({zoom_speed:U}),sU()}get pan_speed(){return this.$$.ctx[4]}set pan_speed(U){this.$$set({pan_speed:U}),sU()}get resolved_url(){return this.$$.ctx[1]}set resolved_url(U){this.$$set({resolved_url:U}),sU()}}export{oF as default};
//# sourceMappingURL=Canvas3DGS-WOF6fnZ1.js.map
