name: PZ Merge Checks

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install .

    - name: Download and register testdata
      run: |
        pushd testdata
        wget -nc https://people.csail.mit.edu/gerarvit/PalimpzestData/enron-eval-tiny.tar.gz
        wget -nc https://people.csail.mit.edu/gerarvit/PalimpzestData/real-estate-eval-tiny.tar.gz
        tar -xzf enron-eval-tiny.tar.gz
        tar -xzf real-estate-eval-tiny.tar.gz
        rm *.tar.gz
        popd
        pz reg --path testdata/enron-eval-tiny --name enron-eval-tiny
        pz reg --path testdata/real-estate-eval-tiny --name real-estate-eval-tiny

    - name: Test with pytest
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
      run: |
        pip install pytest
        pytest -v tests/pytest
  
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install the code linting and formatting tool Ruff
      run: pip install "ruff>=0.9.0"
    - name: check version
      run: ruff --version
    - name: Lint code with Ruff
      run: ruff check --output-format=github --target-version=py38
    - name: Check code formatting with Ruff
      run: ruff check --no-fix . --target-version=py38
      continue-on-error: true

  check-version-bump:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check Version Increased
      run: |
        git fetch --prune --unshallow
        git checkout ${{ github.event.pull_request.base.sha }}
        VERSION=`cat pyproject.toml | grep '^version' | sed -E 's/version.*=.*\"(.*)".*/\1/'`
        echo "Current version is $VERSION"
        git checkout ${{ github.event.pull_request.head.sha }}
        VERSION_PR=`cat pyproject.toml | grep '^version' | sed -E 's/version.*=.*\"(.*)".*/\1/'`
        echo "Version in PR is $VERSION_PR"
        if [ "$VERSION" = "$VERSION_PR" ]; then
          echo "Error: Version has not been bumped"
          exit 1
        fi
    - name: Check Docs Version Matches Code Version
      run: |
        VERSION=`cat pyproject.toml | grep '^version' | sed -E 's/version.*=.*\"(.*)".*/\1/'`
        echo "Version in pyproject.toml is $VERSION"
        VERSION_DOCS=`cat docs/source/conf.py | grep '^release' | sed -E 's/release.*=.*\"(.*)".*/\1/'`
        echo "Version in docs/source/conf.py is $VERSION_DOCS"
        if [ "$VERSION" != "$VERSION_DOCS" ]; then
          echo "Error: Version in docs/source/conf.py does not match pyproject.toml"
          exit 1
        fi
